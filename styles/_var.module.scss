/*===================================*/
// _var.module PUBLIC STYLE VALUE
// ・全てのコンポーネントから色や設定を参照
/*===================================*/

/*=======================*/
// Color
/*=======================*/
$c-bg: #f6f6f6;
$c-base: #1f1f1f;
$c-white: #fff;
$c-black: #000;
$c-emergency: #d90000;
$c-codeblock: #ebebeb;

$cButtonBorderAlpha: #e0e0e0;

$c-twitter: #1d9bf0;
$c-line: #00b900;
$c-facebook: #1877f2;

$c-articleBorderBottom: rgba(255, 255, 255, 0.1333333333);
$c-breadcrumbAlpha: #d3d3d3;

/*=======================*/
// Value
/*=======================*/
$maxWidth: 1440;
$SPDesignWidth: 375;
$breakpoint: 767;
$midbreakpoint: 1024;
$breakpoint-pc: 1024;
$main-area-max-width: 1920;
// コンテンツ両脇の空白
$padding-side: 120;
$padding-side-tab: 60;
$padding-side-sp: 20;
// ダークモード次のマージン
$dark-padding: 101px;

$easeOutCubic: cubic-bezier(0.33, 1, 0.68, 1);
$easeOutCirc: cubic-bezier(0, 0.55, 0.45, 1);
$easeOutQuint: cubic-bezier(0.22, 1, 0.36, 1);
$easeOutExpo: cubic-bezier(0.16, 1, 0.3, 1);
$easeOutQuart: cubic-bezier(0.25, 1, 0.5, 1);
$easeOutBack: cubic-bezier(0.34, 1.56, 0.64, 1);
$easeInCubic: cubic-bezier(0.32, 0, 0.67, 0);
$easeInCirc: cubic-bezier(0.55, 0, 1, 0.45);
$easeInQuint: cubic-bezier(0.64, 0, 0.78, 0);
$easeInBack: cubic-bezier(0.36, 0, 0.66, -0.56);

//auto media quary
$breakpoints: (
  "sp": "screen and (max-width:#{$breakpoint}px)",
  "tb":
    "screen and (min-width:#{$breakpoint}px) and (max-width:#{$breakpoint-pc}px)",
  "pc": "screen and (min-width:#{$breakpoint}px)",
  "pcMax": "screen and (min-width:#{$main-area-max-width}px)",
) !default;
@mixin mq($breakpoint) {
  @media #{map-get($breakpoints,$breakpoint)} {
    @content;
  }
}

// SPデザイン上のピクセル数を引数に与えるとちょうどデザイン幅のSPで見た時デザイン通りになる動的な値を返してくれる関数
@function dynamicWidthSP($width) {
  @return ($width / $SPDesignWidth) * 100vw;
}

@mixin font($size: 16, $height: 1.8, $letspa: 0.05, $weight: 400, $fam: "") {
  @if $fam == "puzzle-gothic" {
    font-family: var(--puzzle-gothic), sans-serif;
  }
  @if $fam == "puzzle-gothic-connect" {
    font-family: var(--puzzle-gothic-connect), sans-serif;
  }
  font-size: $size * 1px;
  font-weight: $weight;
  line-height: $height;
  letter-spacing: $letspa * 1em;
}

@mixin fontSize($size) {
  font-size: #{$size}px;
}

@mixin centerFlex() {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin centerAbs($top: 50%, $left: 50%, $transformX: 50%, $transformY: 50%) {
  position: absolute;
  top: $top;
  left: $left;
  transform: translate(-1 * $transformX, -1 * $transformY);
}

@mixin centerAbsX() {
  @include centerAbs(0, 50%, 50%, 0);
}

@mixin centerAbsY() {
  @include centerAbs(50%, 0, 0, 50%);
}

//JSに対して出力
:export {
  c-bg: $c-bg;
  c-base: $c-base;
  c-white: $c-white;
  cButtonBorderAlpha: $cButtonBorderAlpha;
  breakpoint: $breakpoint;
  midbreakpoint: $midbreakpoint;
  breakpointPC: $breakpoint-pc;
  mainAreaMaxWidth: $main-area-max-width;
  padding-side: $padding-side;
  padding-side-tab: $padding-side-tab;
  padding-side-sp: $padding-side-sp;
}
